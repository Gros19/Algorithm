
//
//
//
//
//
//

//    }
//}

 /*
  * 
  * 
  * 
 10*10 크기의 미로 상자의 구조와 먹이의 위치가 입력된다.


출력
성실한 개미가 이동한 경로를 9로 표시해 출력한다.


입력 예시   
1 1 1 1 1 1 1 1 1 1
1 0 0 1 0 0 0 0 0 1
1 0 0 1 1 1 0 0 0 1
1 0 0 0 0 0 0 1 0 1
1 0 0 0 0 0 0 1 0 1
1 0 0 0 0 1 0 1 0 1
1 0 0 0 0 1 2 1 0 1
1 0 0 0 0 1 0 0 0 1
1 0 0 0 0 0 0 0 0 1
1 1 1 1 1 1 1 1 1 1

출력 예시
1 1 1 1 1 1 1 1 1 1
1 9 9 1 0 0 0 0 0 1
1 0 9 1 1 1 0 0 0 1
1 0 9 9 9 9 9 1 0 1
1 0 0 0 0 0 9 1 0 1
1 0 0 0 0 1 9 1 0 1
1 0 0 0 0 1 9 1 0 1
1 0 0 0 0 1 0 0 0 1
1 0 0 0 0 0 0 0 0 1
1 1 1 1 1 1 1 1 1 1

(1,1) (1,2) (1,3) (1,4) (1,5)
(2,1) (2,2) (2,3) (2,4) (2,5)
(3,1) (3,2) (3,3) (3,4) (3,5)
(4,1) (4,2) (4,3) (4,4) (4,5)
(5,1) (5,2) (5,3) (5,4) (5,5)
  */
package codeUp;
import java.util.Scanner;

public class basic1099{
	public static void main(String[]args) {
		
		Scanner scn = new Scanner(System.in);
		
		int [][] arr = new int [10][10];		//arr에 맵을 입력받기 위해 선언
		
		
		
		
		for (int a1=0;a1<arr.length;a1++)		//arr에 맵 입력
			for (int a2=0;a2<arr.length;a2++)
				arr[a1][a2] = scn.nextInt();	//
			
		
		
		
		int x=1,y=1;			//시작점(1,1)
		int exit =0;			//exit == 1 루프탈출
		
		for(int i=x;exit!=1;i++) {					//i는 세로 시작값으로 이전 저장된 값, x를 넣고 시작 
			for(int j=y;arr[i][j]!=1;j++)			//j는 가로 시작값으로 이전 저장된 값, y를 넣고 시작
													//현재 1이 아니면(벽이 아니면) j++(오른쪽)으로 개미가 이동
			{
				if(arr[i+1][j]==1&&arr[i][j+1]==1	//현 위치에서 오른쪽도 1이고 아래도 1이거나
						||arr[i][j]==2) 			// 2(먹이)애 도착하면
				{		
					arr[i][j]=9;					//조건 만족하면 마지막 있던 자리에 흔적?을 남기고
					exit=1;							//탈출			
					break;
				}
				
				arr[i][j]=9;				//현재 위치는 1이 아니므로 9를 입력
				
			
				
				if(j!=1)					//첫 시작점을 거름
					y=j;					//현재 가로 위치를 y에 기억/ 나중에 시점점으로 사용하기 위함
				
	
				
			}
			
			
		}
		
		
		for (int a1=0;a1<arr.length;a1++) {				//
			for (int a2=0;a2<arr.length;a2++) {			// 출력
				System.out.print(arr[a1][a2]+" ");		//
			}
			System.out.println();
		}
		
	}
}
