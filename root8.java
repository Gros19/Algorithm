package Baekjoon;

import java.util.Scanner;

public class root8 {

	/*
	 * x%2!=0 2부터 1증가시켜 3에서 +2씩 2로도 3으로도 5로도 7로도 11로도 13으로도 17로도 min부터 max까지 각각의
	 * 제곱으로 나눴을 떄 나머지가 0을 소수 하나 하나마다 카운트 단 소수제곱이 max보다 작거나 같을 때까지
	 * 
	 * 1의 제곱1 
	 * 2의 제곱4 
	 * 3의 제곱9 
	 * 5의 제곱25 
	 * 7의 제곱49 
	 * 11의 제곱121 
	 * 13의 제곱169 
	 * 17의 제곱289 
	 * 19의 제곱361
	 * 23의 제곱529 
	 * 29의 제곱841 
	 * 31의 제곱961 
	 * 33의 제곱1089 
	 * 37의 제곱1369 
	 * 39의 제곱1521 
	 * 41의 제곱1681
	 */
	
	// 소수를 구하는 반복문
	// 소수 2부터
	// 소수의 제곱의 배수들로 나누어 떨어지는 것 카운트
	// 소수제곱이 max보다 크면 반복 종료
	public static void main(String[] args) {
		Scanner scn = new Scanner(System.in);
		long min = scn.nextLong();
		long max = scn.nextLong();
		long count = max - (min - 1);
		long root[] = new long[] {
				3, 5, 7, 11, 13, 17, 19, 
				23, 29, 31, 37, 41, 43, 47, 
				53, 59, 61, 67, 71, 73, 79, 
				83, 89, 97, 101, 103, 107, 109, 
				113, 127, 131, 137, 139, 149, 151, 
				157, 163, 167, 173, 179, 181, 191, 
				193, 197, 199, 211, 223, 227, 229, 
				233, 239, 241, 251, 257, 263, 269, 
				271, 277, 281, 283, 293, 307, 311, 
				313, 317, 331, 337, 347, 349, 353, 
				359, 367, 373, 379, 383, 389, 397, 
				401, 409, 419, 421, 431, 433, 439, 
				443, 449, 457, 461, 463, 467, 479, 
				487, 491, 499, 503, 509, 521, 523, 
				541, 547, 557, 563, 569, 571, 577, 
				587, 593, 599, 601, 607, 613, 617, 
				619, 631, 641, 643, 647, 653, 659, 
				661, 673, 677, 683, 691, 701, 709, 
				719, 727, 733, 739, 743, 751, 757, 
				761, 769, 773, 787, 797, 809, 811, 
				821, 823, 827, 829, 839, 853, 857, 
				859, 863, 877, 881, 883, 887, 907, 
				911, 919, 929, 937, 941, 947, 953, 
				967, 971, 977, 983, 991, 997};
	
		
		for(long x = min; x<= Math.sqrt(max); x++) {
		
			for (int i = 0; i <= root.length-1; i++) // p=3
			{
				if(x%(root[i]*root[i])==0) {
					count--;
					break;
				}
			}
	}
		System.out.println(count);
		//System.out.println(count);
		/*
		 * for (long s = min; s <= max; s++) {
							if (s % (p*p) == 0) { count--; }	//s가 소수로 나눠떨어지면 개수root3.java에서 1감
						}
		 * */
	}

}